% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ferpsols.R
\name{ferpsols}
\alias{ferpsols}
\title{Fitness-Euclidean distance ratio particle swarm optimization (FER-PSO) with local search for multimodal optimization}
\usage{
ferpsols(fn, lower, upper, control = list(), ...)
}
\arguments{
\item{fn}{objective function that should be maximized. Should not return \code{NaN}.}

\item{lower}{lower bound.}

\item{upper}{upper bound.}

\item{control}{control parameters for the algorithm. See "Details".}

\item{...}{extra arguments are passed to \code{fn}.}
}
\value{
a list contains:
\describe{
  \item{\code{pbest}}{a matrix; position of the particles.}
  \item{\code{pbestval}}{a vector; corresponding fitness value of each particle.}
  \item{\code{nfeval}}{number of function evaluations.}
  \item{\code{maxima}}{position of particles after using \code{L-BFGS-B}. It should be local maxima. If \code{control$ == FALSE}, then it is \code{NA}.}
  \item{\code{maximaval}}{fitness values of \code{maxima}.}
}
}
\description{
In  FER-PSO, Fitness and Euclidean distance Ratio (FER)
is calculated based on the fitness difference and
the Euclidean distance between a particle's personal best and
other personal bests of the particles in the population. The
key advantage is that FER-PSO removes the need of prespecifying
niching parameters that are commonly required in
existing niching evolutiobary algorithms for multimodal optimization.\cr
Furthermore,  a local search technique has been used to enhance the ability to
locate most global or local optima.
}
\details{
The \code{control} argument is a list that can supply any of the following components:
\describe{
  \item{\code{swarm}}{swarm size. Defaults to \code{50}.}
  \item{\code{iter}}{number of iterations. Defaults to \code{200}.}
  \item{\code{w}}{inertia weight. Defaults to \code{0.729843788}.}
  \item{\code{c1}}{acceleration factor. Defaults to \code{2.05}.}
  \item{\code{c2}}{acceleration factor. Defaults to \code{2.05}.}
  \item{\code{local}}{logical; local search should be performed? Defaults to \code{TRUE}}
  \item{\code{vectorize_local}}{logical; vectorization for local search? Defaults to \code{TRUE}.}
  \item{\code{seed}}{random seed.}
  \item{\code{hybrid}}{logical; if true, before quiting the algorithm,  an \code{L-BFGS-B}
   search with the provided position as initial guess is done to improve the accuracy of the results.
     Defaults to \code{TRUE}. Note that no attempt is done to control the maximal number of
      function evaluations within the local search step (this can be done separately through \code{hybrid.control})
      }
   \item{\code{hybrid_control}}{List with any additional control parameters to pass on to \code{\link{stats}{optim}}
    when using \code{L-BFGS-B} for the local search. Defaults to \code{NULL}.}
}
}
\note{
The function is maximized.\cr

Check whether \code{fn} does not return any \code{NaN}.\cr

The only stopping rule is the number of iterations.
}
\examples{
############################################################################################
## Two-Peak Trap:  global maximum on x = 20 and local maximum on x = 0
fn1 <- function(x)
  y <- (160/15) * (15 - x) * (x < 15) + 40 * (x - 15) * (x >= 15)

ferpsols(fn1, 0, 20, control = list(seed = 66, swarm = 50))

# without local search
ferpsols(fn1, 0, 20, control = list(seed = 66, swarm = 50, local = FALSE))

# without refining and local search
ferpsols(fn1, 0, 20, control = list(seed = 66, swarm = 50, local = FALSE, hybrid = FALSE))


########################################################################################
## Central Two-Peak Trap: one global maximum on x = 20
fn2 <- function(x)
  y <- (x <= 10) * 16 * x + (x > 10 && x < 15) * 32 * (15 - x) + (x >= 15) * 40 * (x - 15)

ferpsols(fn2, 0, 20, control = list(local = TRUE, seed = 66, swarm = 50))



########################################################################################
# Five-Uneven-Peak Trap: two global maxima on 0 and 30 and three local maxima
fn3 <- function(x){
  y <- (x <= 2.5) * 80 * (2.5 - x) + (x > 2.5 && x <= 5) * 64 * (x - 2.5) +
   (x > 5 && x <= 7.5) * 64 * (7.5 - x) + (x > 7.5 && x <= 12.5) * 28 * (x - 7.5) +
    (x > 12.5 && x <= 17.5) * 28 * (17.5 - x) + (x > 17.5 && x <= 22.5) * 32 * (x - 17.5) +
     (x > 22.5 && x <= 27.5) * 32 * (27.5 - x) + (x > 27.5) * 80 * (x -27.5)
}

ferpsols(fn3, 0, 30, control = list(seed = 66, swarm = 50))
## only the global maximum has been found

########################################################################################
# Equal Maxima: five global maxima on x = 0.9, 0.7, 0.1, 0.5, 0.3
fn4 <- function(x)
  y <- (sin(5 * pi * x))^6

ferpsols(fn4, 0, 1, control = list(seed = 66, swarm = 50))

########################################################################################
# Decreasing Maxima: one global on x = 0.1 and four local maxima
fn5 <- function(x)
  y <- exp(-2 * log(2) * ((x - 0.1)/0.8)^2) * (sin(5 * pi * x))^6

ferpsols(fn5, 0, 1, control = list(seed = 66, swarm = 50))
# the local maxima can not be found


########################################################################################
#  Uneven Maxima: global on x = .93390 0.24666 0.68142 0.45063 0.07970
fn6 <- function(x)
  y <- (sin(5 * pi * (x^0.75 - 0.05)))^6

ferpsols(fn6, 0, 1, control = list(seed = 66, swarm = 50))

########################################################################################
# Uneven Decreasing Maxima: global maximum on x = 0.079699 and four local maxima
fn7 <- function(x)
  y <- exp(-2 * log(2) * ((x - 0.08)/0.854)^2) * (sin(5 * pi * (x^(3/4) - 0.05)))^6

ferpsols(fn7, 0, 1, control = list(seed = 66))
# local maxima can not be found

########################################################################################
# Himmelblau's function: four global optima on
# x = c(-2.80512, 3.13131), c(3.00000, 2.00000), c(-3.77931, -3.28319) and c(3.58443, -1.84813)
fn8 <- function(x)
  y <- 200-(x[1] * x[1] + x[2] - 11)^2 - (x[1] + x[2] * x[2] - 7)^2

test <- ferpsols(fn8, c(-6, -6), c(6, 6), control = list(seed = 66, swarm = 50))
unique(round(test$maxima, 5))

########################################################################################
# Six-Hump Camel Back: two global and two local maxima
fn9 <- function(x){
  factor1 <- (4 - 2.1 * (x[1]^2) + (x[1]^4)/3) * (x[1]^2) + x[1] * x[2]
  factor2 <- (-4 + 4 * (x[2]^2)) * (x[2]^2)
  y <- -4 * (factor1 + factor2)
  return(y)
}
ferpsols(fn9, c(-1.9, -1.1), c(1.9, 1.1), control = list(seed = 66, swarm = 50))
# global on c(-0.08984, 0.71266) and c(0.08984, -0.71266)


########################################################################################
# Shekel's foxholes: one global and twenty four local maxima
fn10 <- function(q){
  x <- q[1]
  y <- q[2]

 i <- 1:24
  a <- 16 * ((i \%\% 5) - 2)
  b <- 16 * (floor(i/5) - 2)
  out <- 500 - 1/(.002 + sum(1/(1 + i + (x - a)^6 + (y - b)^6)))
  return(out)
}

test <- ferpsols(fn10, rep(-65.536, 2), rep(65.536, 2), control = list(seed = 66, swarm = 100))
unique(round(test$maxima, 5))
########################################################################################
## 2D Inverted Shubert function : eighteen global maxima and many local

fn11 <- function(x){

   j <- 1:5
   out <- -sum(j * cos((j + 1) * x[1] + j)) * sum(j * cos((j + 1) * x[2] + j))
   return(out)
}

test <- ferpsols(fn11, rep(-10, 2), rep(10, 2), control = list(seed = 66, swarm = 250))
unique(round(test$maxima, 5)) ## all global maxima but not local maxima


########################################################################################
# Inverted Vincent function: 6^n peaks
fn12 <- function(x, n)
  1/n * sum(sin(10 * log(x)))
\dontrun{
test <- ferpsols(fn12, .25, 10, control = list(seed = 66, swarm = 150), n = 1)
unique(round(test$maxima, 5))


test <- ferpsols(fn12, rep(.25, 2), rep(10, 2), control = list(seed = 66, swarm = 2000), n = 2)
unique(round(test$maxima, 5))


ferpsols(fn12, rep(.25, 3), rep(10, 3), control = list(seed = 66, swarm = 1000), n = 3)
}

}
\references{
Qu, B. Y., Liang, J. J., & Suganthan, P. N. (2012). Niching particle swarm optimization with local search for multi-modal optimization. Information Sciences, 197, 131-143.\cr

 Li, X. (2007, July). A multimodal particle swarm optimizer based on fitness Euclidean-distance ratio. In Proceedings of the 9th annual conference on Genetic and evolutionary computation (pp. 78-85). ACM. \cr

 Based on a MATLAB code that can be found in Suganthan's home page.
}

